============General==================
============Steps====================
Procedure main
	1 open s1 project://v_HpVlanOpenStack/ssh.ffsp
	2 command s1 \\n
	3 command s1 term length 1000
	4 for {set i 0} {$i < [param call_count]} {incr i}
		useFieldsInCommand="false"
		4.1 eval set cl [split [param call_$i]]
			useFieldsInCommand="false"
		4.2 eval set params [lassign $cl proc]
			useFieldsInCommand="false"
		4.3 #
			analyze
				none 
				message Information:Call $i : $cl
			useFieldsInCommand="false"
		4.4 call $proc $params
			useFieldsInCommand="false"
	5 command s1 logout
	6 return $ret
Procedure getPorts
	1 #return empty list of ports
		useFieldsInCommand="false"
Procedure getProperties
	1 #return static information and empty list of ports
		useFieldsInCommand="false"
Procedure createVlan
	1 #token and reservation ID
		useFieldsInCommand="false"
		1.1 eval set token [velocity token]
			useFieldsInCommand="false"
		1.2 eval set reservationId [velocity reservationId]
			useFieldsInCommand="false"
		1.3 eval set reservationId [param reservationId]
			skip="true"
			useFieldsInCommand="false"
	2 #open a REST session on Velocity and get the cloud object ID
		useFieldsInCommand="false"
		2.1 open s0 application:com.fnfr.itest.applications.webservices.restful
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			transferableType="com.fnfr.itest.applications.webservices.properties.restful.RESTfulSessionProperties"
			url="[velocity url]"
			url.inherit="false"
			acceptAllCookies="true"
			acceptAllCookies.inherit="false"
		2.2 GET s0 api/reservation/v3/reservation/$reservationId/topology
			analyze
				query fn:count(//mapped/Xml/tbml/body/resources/resource[@type='group']/resource[@type='virtual_network'])
				assert $value == 1
					When True
						DeclareExecutionIssue OK:The topology has one group containing a VLAN tenant subnet
						PassTestIfNotAlreadyFailed 
					When False
						DeclareExecutionIssue Error:The topology needs one and only one group containing the VLAN tenant subnet
						FailTest 
			action="api/reservation/v3/reservation/$reservationId/topology"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			transferableType="com.fnfr.itest.applications.webservices.properties.AuthenticationProperties"
			acceptAllCertificates="true"
			acceptAllCertificates.inherit="false"
			inherit="false"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			memberClasses
				item="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry"
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="Accept")(header.inherit="false")(value="application/tbml")(value.inherit="false")
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="X-Auth-Token")(header.inherit="false")(value="$token")(value.inherit="false")
		2.3 GET s0 api/reservation/v3/reservation/$reservationId/topology
			analyze
				query fn:count(//mapped/Xml/tbml/body/resources/resource[@type='group']/resource[@type='virtual_network']/property[@name='cloudObjectId'])
				assert $value == 1
					When True
						DeclareExecutionIssue OK:Found one OpenStack cloud object ID
						PassTestIfNotAlreadyFailed 
					When False
						RepeatStep 3.0:
						DeclareExecutionIssue Information:Waiting for OpenStack to provision cloud object IDs
						SkipRemainingRules 
			analyze
				query //mapped/Xml/tbml/body/resources/resource[@type='group']/resource[@type='virtual_network']/property[@name='cloudObjectId']
				store cloudObjectId
			action="api/reservation/v3/reservation/$reservationId/topology"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			transferableType="com.fnfr.itest.applications.webservices.properties.AuthenticationProperties"
			acceptAllCertificates="true"
			acceptAllCertificates.inherit="false"
			inherit="false"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			memberClasses
				item="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry"
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="Accept")(header.inherit="false")(value="application/tbml")(value.inherit="false")
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="X-Auth-Token")(header.inherit="false")(value="$token")(value.inherit="false")
		2.4 close s0 
			useFieldsInCommand="false"
	3 #open a REST session on OpenStack and get the segmentation ID (VLAN) for the network
		useFieldsInCommand="false"
		3.1 open t1 application:com.fnfr.itest.applications.webservices.restful
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			transferableType="com.fnfr.itest.applications.webservices.properties.restful.RESTfulSessionProperties"
			url="http://[param property_openstack_controllerIp]:5000/v2.0/"
			url.inherit="false"
			acceptAllCookies="true"
			acceptAllCookies.inherit="false"
		3.2 POST t1 tokens
			analyze
				query fn:count(mapped/Json/access/xtoken/id)
				assert $value == 1
					When True
						DeclareExecutionIssue OK:Received OpenStack auth token
						PassTestIfNotAlreadyFailed 
					When False
						DeclareExecutionIssue Error:Failed to receive OpenStack auth token
						FailTest 
			analyze
				query mapped/Json/access/xtoken/id
				store authToken
			analyze
				query fn:count(mapped/Json/access/serviceCatalog/item[name='neutron']/endpoints/item/publicURL)
				assert $value == 1
					When True
						PassTestIfNotAlreadyFailed 
						DeclareExecutionIssue OK:Found neutron public URL endpoint
					When False
						FailTest 
						DeclareExecutionIssue Error:Failed to find neutron public URL endpoint
			analyze
				query mapped/Json/access/serviceCatalog/item[name='neutron']/endpoints/item/publicURL
				store neutronURL
			normalOffset="50.739"
			estimatedStepExecutionTime="0.766"
			action="tokens"
			inherit="false"
			inherit="false"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			memberClasses
				item="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry"
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="Content-Type")(header.inherit="false")(value="application/json")(value.inherit="false")
		3.3 GET t1 $neutronURL/v2.0/networks/$cloudObjectId
			analyze
				query fn:count(mapped/Json/network/provider_segmentation_id)
				assert $value == 1
					When True
						DeclareExecutionIssue OK:OpenStack network shows a segmentation ID
						PassTestIfNotAlreadyFailed 
					When False
						DeclareExecutionIssue Error:OpenStack network does not show a segmentation ID
						FailTest 
			analyze
				query mapped/Json/network/provider_segmentation_id
				store segmentationId
			analyze
				none 
				message Information:Segmentation ID: $segmentationId
			action="$neutronURL/v2.0/networks/$cloudObjectId"
			inherit="false"
			transferableToolId="com.fnfr.itest.applications.webservices.restful"
			memberClasses
				item="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry"
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="Content-Type")(header.inherit="false")(value="application/json")(value.inherit="false")
			item(transferableToolId="com.fnfr.itest.applications.webservices.restful")(transferableType="com.fnfr.itest.applications.webservices.properties.HTTPHeaderEntry")(header="X-Auth-Token")(header.inherit="false")(value="$authToken")(value.inherit="false")
		3.4 close t1 
			useFieldsInCommand="false"
		3.5 eval gset segmentationId $segmentationId
			useFieldsInCommand="false"
	4 #create the VLAN
		useFieldsInCommand="false"
		4.1 command s1 config t
		4.2 command s1 vlan $segmentationId
		4.3 command s1 end
	5 return 
Procedure destroyVlan
	1 #
		analyze
			none 
			assert 1 == 1
				When True
					DeclareExecutionIssue OK:NOOP
					PassTestIfNotAlreadyFailed 
				When False
					FailTest 
		useFieldsInCommand="false"
	2 return 
Procedure addToVlan
	1 #make sure createVlan has been called - 5.4 called it and 6.0 doesn't as much
		useFieldsInCommand="false"
		1.1 if ![info exists global segmentationId]
			useFieldsInCommand="false"
			1.1.1 then 
				useFieldsInCommand="false"
				1.1.1.1 call createVlan
					useFieldsInCommand="false"
	2 #get arguments
		useFieldsInCommand="false"
		2.1 eval set args ${arg[1]}
			useFieldsInCommand="false"
		2.2 eval set port [lindex $args 1]
			useFieldsInCommand="false"
		2.3 eval set tagSetting [lindex $args 2]
			useFieldsInCommand="false"
	3 #add port to VLAN
		useFieldsInCommand="false"
		3.1 command s1 config t
		3.2 command s1 vlan [gget segmentationId]
		3.3 command s1 $tagSetting $port
		3.4 command s1 end
		3.5 command s1 wr mem
	4 return 
Procedure removeFromVlan
	1 #get arguments
		useFieldsInCommand="false"
		1.1 eval set args ${arg[1]}
			useFieldsInCommand="false"
		1.2 eval set port [lindex $args 1]
			useFieldsInCommand="false"
		1.3 eval set tagSetting [lindex $args 2]
			useFieldsInCommand="false"
	2 #remove port from any VLAN membership
		useFieldsInCommand="false"
		2.1 command s1 sho vlan port $port
			analyze
				query fn:count(//VLAN_ID)
				assert $value == 1
					When True
						DeclareExecutionIssue OK:Found one VLAN ID assignment
						PassTestIfNotAlreadyFailed 
					When False
						DeclareExecutionIssue Error:Failed to find one VLAN ID assignment
						FailTest 
			normalOffset="3.99"
			estimatedStepExecutionTime="0.196"
			useResponseMapLibraryApplicability="false"
			responseMap="show_vlan_port.ffrm"
			useResponseMapLibraryFromSession="false"
		2.2 command s1 sho vlan port $port
			analyze
				query //VLAN_ID
				store vlanId
			normalOffset="3.99"
			estimatedStepExecutionTime="0.196"
			useResponseMapLibraryApplicability="false"
			responseMap="show_vlan_port.ffrm"
			useResponseMapLibraryFromSession="false"
		2.3 command s1 config t
		2.4 command s1 no vlan $vlanId
			skip="true"
		2.5 command s1 vlan 1
		2.6 command s1 untagged $port
		2.7 command s1 end
		2.8 command s1 wr mem
	3 return 
============Global Events============
OnFailTestAction
	item(actionId="ExitExecution")
		actionProperties
============Parameters===============
parameters(escape="true")
	parameters
		property_ipAddress="10.108.36.248"
		property_ssh_username="spirent"
		property_ssh_password="spirent"
		property_openstack_username="demo"
		property_openstack_tenant="demo"
		property_openstack_password="3dviEpqYGs8="
		property_openstack_controllerIp="10.108.37.37"
		call_count="1"
		call_0="getPorts"
		call_1="addToVlan 200 7 untagged"
		reservationId="345757d8-4bfb-4ab9-a379-575d43e30c80"
